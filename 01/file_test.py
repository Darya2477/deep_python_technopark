from file import gen
import unittest
from unittest.mock import patch
import os


class TestGen(unittest.TestCase):
    def setUp(self):
        pass

    def tearDown(self):
        pass

    # –¢–ï–°–¢ –ù–ê –û–¢–ö–†–´–¢–ò–ï –ù–ï–°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û –§–ê–ô–õ–ê
    @patch("file.logging.error")
    def test_file_not_exist(self, error_mock):
        for i in gen("file_not_exist.txt", ["param1", "param2"]):
            pass
        error_mock.assert_called_once_with("–§–∞–π–ª file_not_exist.txt –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –¢–ï–°–¢ "–ü–ê–†–ê–ú–ï–¢–† file –Ø–í–õ–Ø–ï–¢–°–Ø –î–ò–†–ï–ö–û–†–ò–ï–ô"
    @patch("file.logging.error")
    def test_directory_instead_file(self, error_mock):
        os.mkdir("folder")
        for i in gen("folder", ["param1", "param2"]):
            pass
        error_mock.assert_called_once_with(
            "–í –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ file, –≤—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∞ –Ω–µ —Ñ–∞–π–ª–∞."
        )
        os.rmdir("folder")

    # –¢–ï–°–¢ –ù–ê –ü–†–ê–í–ê –î–û–°–¢–£–ü–ê
    @patch("file.logging.error")
    def test_no_permissions(self, error_mock):
        with open("file_with_no_permissions.txt", "r"):
            pass
        with open("file_with_no_permissions.txt", "r"):
            os.system("chmod a-rwx file_with_no_permissions.txt")
            with open("file_with_no_permissions.txt", "r"):
                pass
            for i in gen("file_with_no_permissions.txt", ["param1", "param2"]):
                pass
            os.chmod("file_with_no_permissions.txt", 0o000)
            with open("file_with_no_permissions.txt", "w"):
                pass
            error_mock.assert_called_once_with(
                "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É file_with_no_permissions.txt."
            )
        os.remove("file_with_no_permissions.txt")

    # –¢–ï–°–¢ –ù–ê –ù–ï–ü–†–ê–í–ò–õ–¨–ù–£–Æ –ü–ï–†–ï–î–ê–ß–£ –ü–ê–†–ê–ú–ï–¢–†–ê file –í –§–£–ù–ö–¶–ò–Æ
    @patch("file.logging.error")
    def test_not_correct_file(self, error_mock):
        for i in gen(123, ["param1", "param2"]):
            pass
        error_mock.assert_called_once_with(
            "–ü–∞—Ä–µ–º–µ—Ç—Ä file –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–º –∏–ª–∏ —Ñ–∞–π–ª–æ–≤—ã–º –æ–±—ä–µ–∫—Ç–æ–º, a params —Å–ø–∏—Å–∫–æ–º —Å—Ç—Ä–æ–∫."
        )

    # –¢–ï–°–¢ –ù–ê –ù–ï–ü–†–ê–í–ò–õ–¨–ù–£–Æ –ü–ï–†–ï–î–ê–ß–£ –ü–ê–†–ê–ú–ï–¢–†–ê params –í –§–£–ù–ö–¶–ò–Æ ‚Ññ1
    @patch("file.logging.error")
    def test_not_correct_params(self, error_mock):
        for i in gen("text.txt", 456):
            pass
        error_mock.assert_called_once_with(
            "–ü–∞—Ä–µ–º–µ—Ç—Ä file –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–º –∏–ª–∏ —Ñ–∞–π–ª–æ–≤—ã–º –æ–±—ä–µ–∫—Ç–æ–º, a params —Å–ø–∏—Å–∫–æ–º —Å—Ç—Ä–æ–∫."
        )

    # –¢–ï–°–¢ –ù–ê –ù–ï–ü–†A–í–ò–õ–¨–ù–£–Æ –ü–ï–†–ï–î–ê–ß–£ –ü–ê–†–ê–ú–ï–¢–†–ê params –í –§–£–ù–ö–¶–ò–Æ ‚Ññ2
    @patch("file.logging.error")
    def test_not_correct_elements_in_params(self, error_mock):
        for i in gen("text.txt", ["text", 456, 9.043, {"key": 66}]):
            pass
        error_mock.assert_called_once_with(
            "–ü–∞—Ä–µ–º–µ—Ç—Ä file –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–º –∏–ª–∏ —Ñ–∞–π–ª–æ–≤—ã–º –æ–±—ä–µ–∫—Ç–æ–º, a params —Å–ø–∏—Å–∫–æ–º —Å—Ç—Ä–æ–∫."
        )

    # –¢–ï–°–¢ –ù–ê –ù–ï–ü–†–ê–í–ò–õ–¨–ù–£–Æ –ö–û–î–ò–†–û–í–ö–£
    @patch("file.logging.error")
    def test_uncorrect_encodding(self, error_mock):
        with open("file_with_uncorrect_encoding.txt", "w") as file:
            file.write("–Ç[–∂5–ê–Ü—ö‚Ññ5L—ån‚Ä¢CU5‚Äò—Ñ{–Ü¬´@—ò|¬§—å–Ç—üoYl—ç2")
            for i in gen(file, ["param1, param2"]):
                pass
        os.remove("file_with_uncorrect_encoding.txt")

    # –¢–ï–°–¢ –ù–ê –í–´–•–û–î –ó–ê –ì–†–ê–ù–ò–¶–£ –ì–ï–ù–ï–†–ê–¢–û–†–ê
    def test_empty_file(self):
        with open("empty_file.txt", "w"):
            pass
        generator = gen("empty_file.txt", ["param1", "param2"])
        self.assertRaises(StopIteration, next, generator)
        os.remove("empty_file.txt")

    # –¢–ï–°–¢ –ù–ê –ü–ï–†–ï–î–ê–ß–£ –§–ê–ô–õ–ê –í –§–£–ù–ö–¶–ò–Æ
    def test_file_input(self):
        try:
            gen("./text.txt", ["search_term"])
        except Exception as e:
            self.fail(f"gen raised an exception: {e}")

    # –¢–ï–°–¢ –ù–ê –ü–ï–†–ï–î–ê–ß–£ –§–ê–ô–õ–û–í–û–ì–û –û–ë–™–ï–ö–¢–ê –í –§–£–ù–ö–¶–ò–Æ
    def test_file_object_input(self):
        try:
            file = open("./text.txt")
            gen(file, ["search_term"])
        except Exception as e:
            self.fail(f"gen raised an exception: {e}")

    # –¢–ï–°–¢ –ù–ê –ü–û–ò–°–ö –°–¢–†–û–ö –° –£–ß–ï–¢–û–ú –†–ï–ì–ò–°–¢–†–ê
    def test_case_sensitive_search(self):
        with open("./text.txt", "w") as file:
            file.write("This is a test line\n")
        results = list(gen("./text.txt", ["This"]))
        self.assertEqual(results, ["This is a test line\n"])

    # –¢–ï–°–¢ –ù–ê –ü–û–ò–°–ö –°–¢–†–û–ö –ë–ï–ó –£–ß–ï–¢–ê –†–ï–ì–ò–°–¢–†–ê
    def test_case_insensitive_search(self):
        with open("./text.txt", "w") as file:
            file.write("This is a test line\n")
        results = list(gen("./text.txt", ["this"]))
        self.assertEqual(results, ["This is a test line\n"])

    # –¢–ï–°–¢ –ù–ê –ü–†–û–í–ï–†–ö–£ –ü–û–õ–ù–û–ì–û –°–û–í–ü–ê–î–ï–ù–ò–Ø –°–õ–û–í–ê
    def test_exact_match(self):
        with open("./text.txt", "w") as file:
            file.write("This is a test line\n")
        results = list(gen("./text.txt", ["this is a test line"]))
        self.assertEqual(results, ["This is a test line\n"])

    # –¢–ï–°–¢ "–ù–ï–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í"
    def test_no_results(self):
        with open("./text.txt", "w") as file:
            file.write("This is a test line\n")
        results = list(gen("./text.txt", ["another"]))
        self.assertEqual(results, [])
